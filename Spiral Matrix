Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:

Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Solution: Simulation:
Let the array have \text{R}R rows and \text{C}C columns. \text{seen[r][c]}seen[r][c] denotes that the cell on the\text{r}r-th row and \text{c}c-th column was previously visited. Our current position is \text{(r, c)}(r, c), facing direction \text{di}di, and we want to visit \text{R}R x \text{C}C total cells.

As we move through the matrix, our candidate next position is \text{(cr, cc)}(cr, cc). If the candidate is in the bounds of the matrix and unseen, then it becomes our next position; otherwise, our next position is the one after performing a clockwise turn.



def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix:
            return []
        R=len(matrix)
        C=len(matrix[0])
        seen=[]
        for i in range(R):
            seen.append([False]*C)
        ans=[]
        #create 2 lists dr and dc to store direction change for r,c in clockwise direction
        dr=[0,1,0,-1]
        dc=[1,0,-1,0]
        r=c=di=0
        for i in range(R*C):
            ans.append(matrix[r][c]) #init (0,0)
            seen[r][c]=True #set position to visited
            cr=r+dr[di]
            cc=c+dc[di]
            if 0<=cr<R and 0<=cc<C and not seen[cr][cc]: #if cr,cc lies in bounds and is not visited
                r,c=cr,cc
            else:
                di=(di+1)%4
                r=r+dr[di]
                c=c+dc[di]
        return ans
