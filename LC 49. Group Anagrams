Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]
 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lower-case English letters.


class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        #2 strings are anagrams iff their sorted strings are equal. So maintain a dict with key as tuple of sorted letters and val as list of all strings formed from it.
        result_dict=collections.defaultdict(list)# in default dict if key is not present it is added else the value is appended to existing key so no if-else req.
        for s in strs:
            result_dict[tuple(sorted(s))].append(s)
        print(result_dict.keys())
        return result_dict.values()
        
        
        
 Complexity Analysis

Time Complexity: O(NK \log K)O(NKlogK), where NN is the length of strs, and KK is the maximum length of a string in strs. The outer loop has complexity O(N)O(N) as we iterate through each string. Then, we sort each string in O(K \log K)O(KlogK) time.

Space Complexity: O(NK)O(NK), the total information content stored in ans.
