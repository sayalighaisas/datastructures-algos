A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

The Linked List is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:

val: an integer representing Node.val
random_index: the index of the node (range from 0 to n-1) where random pointer points to, or null if it does not point to any node.
 



"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if head is None:
            return None
        
        #Pass 1 #make copies of all nodes in dict
        clone_dict={}
        curr=head
        while curr is not None:
            clone_dict[curr]= Node(curr.val,None,None) #key=actual node #value=blank node with value same as original node this is going to be our clone node
            curr = curr.next
        
        #Pass 2 add the next and random ptrs
        curr=head
        while curr is not None:
            clone_dict.get(curr).next=clone_dict.get(curr.next) #update the next ptr of clone node in dict to point to curr.next
            clone_dict.get(curr).random=clone_dict.get(curr.random) #update the random ptr of clone node in dict to point to curr.random as now that cloned node already exists in clone_dict
            curr = curr.next
        return clone_dict.get(head)
        
        
        
        
        TC: O(N)
        SC: 0(N) for dict
