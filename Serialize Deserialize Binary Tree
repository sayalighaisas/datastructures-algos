Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

DFS:(Pre-Order Traversal)
In this task, however, the DFS strategy is more adapted for our needs, since the linkage among the adjacent nodes is naturally encoded in the order, which is rather helpful for the later task of deserialization.


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        def rserialize(root, string):#Recursive Helper function
            #BC
            if root is None:
                string+='None,'
                
            else: #Recursive Pre-Order Traversal
                string+=str(root.val)+','
                string=rserialize(root.left,string)
                string=rserialize(root.right,string)
            return string   
            
        return rserialize(root,'')

    def deserialize(self, data_str):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def rdeserialize(l): #Recursive Helper function
            #BC
            if l[0]=='None':
                l.pop(0)  #pop 1st val in list, val is removed from list
                return None
            
            root=TreeNode(l[0])
            l.pop(0) #pop 1st val in list
            root.left=rdeserialize(l)
            root.right=rdeserialize(l)
            return root       
        
        data_list=data_str.split(',') #convert string to list and pass in recursive functn
        root=rdeserialize(data_list) #final top root will be returned in root
        return root


# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))
