Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list.
Note:

Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
Example 1:

Input:
beginWord = "hit",
endWord = "cog",
wordList = ["hot","dot","dog","lot","log","cog"]

Output: 5

Explanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Example 2:

Input:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log"]

Output: 0

Explanation: The endWord "cog" is not in wordList, therefore no possible transformation.

Approach 1: Breadth First Search
Intuition

Start from beginWord and search the endWord using BFS.

Algorithm

Do the pre-processing on the given wordList and find all the possible generic/intermediate states. Save these intermediate states in a dictionary with key as the intermediate word and value as the list of words which have the same intermediate word.

Push a tuple containing the beginWord and 1 in a queue. The 1 represents the level number of a node. We have to return the level of the endNode as that would represent the shortest sequence/distance from the beginWord.

To prevent cycles, use a visited dictionary.

While the queue has elements, get the front element of the queue. Let's call this word as current_word.

Find all the generic transformations of the current_word and find out if any of these transformations is also a transformation of other words in the word list. This is achieved by checking the all_combo_dict.

The list of words we get from all_combo_dict are all the words which have a common intermediate state with the current_word. These new set of words will be the adjacent nodes/words to current_word and hence added to the queue.

Hence, for each word in this list of intermediate words, append (word, level + 1) into the queue where level is the level for the current_word.

Eventually if you reach the desired word, its level would represent the shortest transformation sequence length.

Termination condition for standard BFS is finding the end word.



from collections import defaultdict
class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if not endWord or not beginWord or not wordList or endWord not in wordList:
            return 0
        
        L=len(beginWord)
        
        all_combo_dict=defaultdict(list)
        for word in wordList:
            for i in range(L):#iterate over each letter of word
                all_combo_dict[word[:i] + "*" + word[i+1:]].append(word)
                
        queue=collections.deque([(beginWord,1)]) #list of tuples
        
        visited={beginWord:True}
        
        while queue:
            current_word, level=queue.popleft() #fist elem in queue
            for i in range(L): #for each letter in current_word get intermed_words
                intermediate_word=current_word[:i]+"*"+current_word[i+1:]
                
                #get list of all words from all_combo_dict with this intermed state
                for word in all_combo_dict[intermediate_word]:
                    if word==endWord:
                        return level+1 #terminating condition
                    if word not in visited:
                        visited[word]=True
                        queue.append((word,level+1)) #add to queue
                all_combo_dict[intermediate_word]=[] #make the list empty to avoid rechecking same intermedate state later
        return 0
        
