You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
Example 3:

Input: nums = [1,-1], k = 1
Output: [1,-1]
Example 4:

Input: nums = [9,11], k = 2
Output: [11]
Example 5:

Input: nums = [4,-2], k = 2
Output: [4]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

DP Solution:

The algorithm is quite straightforward :

Iterate along the array in the direction left->right and build an array left.

Iterate along the array in the direction right->left and build an array right.

Build an output array as max(right[i], left[i + k - 1]) for i in range (0, n - k + 1).


class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        n=len(nums)
        if n==0 or k==0:
            return []
        if k==1:
            return nums
        
        #similar to trapping DP create left and right arrays
        left=[0]*n
        right=[0]*n
        
        left[0]=nums[0]
        for i in range(1,n):
            #from l to r
            if i%k==0: #start of each block from 2nd block onwards copy val as is
                left[i]=nums[i]
                
            else: #for every other val in each block compare and update with max of all prev within block
                left[i]=max(left[i-1],nums[i])
        print(left)
        
        right[n-1]=nums[n-1]
        for j in range(n-2,-1,-1):
            #from r to l
            if (j+1) % k == 0:
                #last elem of each block is copied as is
                #print("here st j = ",j)
                right[j]=nums[j]
            else:
                #print("here : ",j)
                right[j]=max(right[j+1],nums[j])
        #print(right)
        
        output=[]
        for i in range(n-k+1): #imp for sliding window the window moves by 1 on each iteration so number of windows=n-k+1
            output.append(max(right[i], left[i+k-1])) #j=i+k-1 for each window
            
        return output
