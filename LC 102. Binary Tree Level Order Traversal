Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its level order traversal as:
[
  [3],
  [9,20],
  [15,7]
]

# Iterative Approach:
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: TreeNode) -> List[List[int]]:
        levels=[] #outer list of lists
        if root is None:
            return levels
        queue=collections.deque([root]) #insert root of 0th level into q
        level_no=0
        while queue:
            levels.append([])
            level_len=len(queue) #to iterate over no of elem in curr level
            
            for i in range(level_len):
                node=queue.popleft() #first elem in q
                levels[level_no].append(node.val) #level_no gives correct list to append in
                
                # add child nodes of the current level in the queue for the next level
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            
            level_no+=1 #update level no to next level
            
        return levels
        
 '''
 # Recursive Approach: 
      levels = []
        if not root:
            return levels
        
        def helper(node, level):
            # start the current level
            if len(levels) == level:
                levels.append([])

            # append the current node value
            levels[level].append(node.val)

            # process child nodes for the next level
            if node.left:
                helper(node.left, level + 1)
            if node.right:
                helper(node.right, level + 1)
            
        helper(root, 0)
        return levels
 '''
 
 
Complexity Analysis

Time complexity : \mathcal{O}(N)O(N) since each node is processed exactly once.

Space complexity : \mathcal{O}(N)O(N) to keep the output structure which contains N node values.
