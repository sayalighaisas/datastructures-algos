Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

 



class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return node
        
        #visited dict to save k=node and vsl=clone node
        visited={}
        
        #put first node in queue
        queue=deque([])
        queue.append(node)
        #clone first node and put in visited dict
        visited[node]=Node(node.val,[]) #set ajd list of neighbors as []
        
        #BFS traversal to explore and add neighbors
        while queue: #has nodes of original graph
            n=queue.popleft()
            #iterate through all neighbors of node from adj list
            for neighbor in n.neighbors:
                if neighbor not in visited:
                    #add neighbor to dict and queue
                    visited[neighbor]=Node(neighbor.val,[])
                    queue.append(neighbor)
                #populate edges of each cloned node as adj list of cloned neighbor nodes
                visited[n].neighbors.append(visited[neighbor])
        
        #return clone of start node from visited
        return visited[node]
        
