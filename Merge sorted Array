Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
 

Constraints:

-10^9 <= nums1[i], nums2[i] <= 10^9
nums1.length == m + n
nums2.length == n

class Solution(object):
    #2 ptr method start from end of nos. in each list
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: None Do not return anything, modify nums1 in-place instead.
        """
        p1=m-1 #set a ptr at last num val in nums1
        p2=n-1
        
        p=n+m-1 #end of nums1
        
        while p1>=0 and p2>=0:
            if nums1[p1]<nums2[p2]:
                nums1[p]=nums2[p2] #add largest elem to last index position
                p2-=1
            else:
                nums1[p]=nums1[p1]
                p1-=1
            p-=1
         
        #edge case to add 0th elem of p2 in p1 if all traversed then p2=-1
        nums1[:p2+1]=nums2[:p2+1]
