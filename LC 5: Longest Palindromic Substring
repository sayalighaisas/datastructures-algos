Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

Example 1:

Input: "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: "cbbd"
Output: "bb"


Brute Force O(N3)

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        max_len=0
        ans_str=""
        for i in range(len(s)):
            for j in range(i+1, len(s)+1):
                substr=s[i:j]
                rev_substr=substr[::-1]
                if substr==rev_substr:
                    if len(substr)>max_len:
                        max_len=len(substr)
                        ans_str=substr
        return ans_str                
                    


 #Expand around center (Optimised solution)    O(N2)
 
class Solution:
    def longestPalindrome(self, s: str) -> str:
       
        res=""
        for i in range(len(s)):
            #odd case "aba"(3 possible centers each point and +2 viz at start and end)(2n-1)
            tmp=self.expand_arnd_center(s,i,i)
            if len(tmp)>len(res):
                res=tmp
            
            #even case "abba"(4 letters so 4 possible centers + 3 viz at start, at end and in middle of center 2) (2n-1)
            tmp=self.expand_arnd_center(s,i,i+1)
            if len(tmp)>len(res):
                res=tmp
        return res       
                
    def expand_arnd_center(self,s,l,r):
        while l>=0 and r<len(s) and s[l]==s[r]:
            l-=1
            r+=1
        return s[l+1:r]    
        
