Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it is able to trap after raining.

Example:

Input: [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6




In brute force, we iterate over the left and right parts again and again just to find the highest bar size upto that index. But, this could be stored. Voila, dynamic programming.
Find maximum height of bar from the left end upto an index i in the array \text{left\_max}left_max.
Find maximum height of bar from the right end upto an index i in the array \text{right\_max}right_max.
Iterate over the \text{height}height array and update ans:


DP Solution
class Solution:
    def trap(self, height: List[int]) -> int:
        if height == []:
            return 0
        
        wtrLvl=0
        n=len(height)
        lmax=[0]*(n)
        rmax=[0]*(n)
        
        lmax[0] = height[0]
        for i in range(1,n):
            lmax[i] = max(height[i],lmax[i-1])
            
        rmax[n-1] = height[n-1]
        for i in range(n-2,-1,-1):
            rmax[i] = max(height[i],rmax[i+1])
        
        
        for i in range(n):
            wtrLvl+=min(lmax[i],rmax[i])-height[i]
        
        return wtrLvl
        
        
