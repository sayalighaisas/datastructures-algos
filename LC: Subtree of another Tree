Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
 

Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.


Approach #1 Using Preorder Traversal [Accepted]
Algorithm

We can find the preorder traversal of the given tree ss and tt, given by, say s_{preorder}s 
preorder
​	
  and t_{preorder}t 
preorder
​	
  respectively(represented in the form of a string). Now, we can check if t_{preorder}t 
preorder
​	
  is a substring of s_{preorder}s 
preorder
​	
 .

But, in order to use this approach, we need to treat the given tree in a different manner. Rather than assuming a nullnull value for the childern of the leaf nodes, we need to treat the left and right child as a lnulllnull and rnullrnull value respectively. This is done to ensure that the t_{preorder}t 
preorder
​	
  doesn't become a substring of s_{preorder}s 
preorder
​	
  even in cases when tt isn't a subtree of ss.

You can also note that we've added a '#' before every considering every value. If this isn't done, the trees of the form s:[23, 4, 5] and t:[3, 4, 5] will also give a true result since the preorder string of the t("23 4 lnull rull 5 lnull rnull") will be a substring of the preorder string of s("3 4 lnull rull 5 lnull rnull"). Adding a '#' before the node's value solves this problem.

 ########

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        
        tree1=self.preorder(s, True)
        tree2=self.preorder(t, True)
        if tree2 in tree1:
            return True
        else:
            return False
        
        
    def preorder(self,tree,left_flag):
        #the left_flag is set st left child will always be True and right child will always be set to False and if it is a None the corresp. string is appended
        if not tree:
            if left_flag:
                return "lnull"
            else:  
                return "rnull"
        return "#"+str(tree.val)+self.preorder(tree.left,True)+self.preorder(tree.right,False)
        
        
 ########      
 Complexity Analysis

Time complexity : O(m^2+n^2+m*n)O(m 
2
 +n 
2
 +m∗n). A total of nn nodes of the tree ss and mm nodes of tree tt are traversed. Assuming string concatenation takes O(k)O(k) time for strings of length kk and indexOf takes O(m*n)O(m∗n).

Space complexity : O(max(m,n))O(max(m,n)). The depth of the recursion tree can go upto nn for tree tt and mm for tree ss in worst case.
