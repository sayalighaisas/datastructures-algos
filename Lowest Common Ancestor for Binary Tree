Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Given the following binary tree:  root = [3,5,1,6,2,0,8,null,null,7,4]


 

Example 1:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.
Example 2:

Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
 

Note:

All of the nodes' values will be unique.
p and q are different and both values will exist in the binary tree.


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    #constructor
    def __init__(self):
        self.ans=None   #to store LCA node
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
    #if node is p or q then mid is marked True if a node is parent of p or q the left or right path is marked as True and backtracked.

        def recurse_tree(current_node):
            
            #end of branch for lc rc of leaf nodes
            if current_node is None:
                return False
            
            #Left recursion
            left=recurse_tree(current_node.left)
            
             #Right recursion
            right=recurse_tree(current_node.right)
            
            mid = current_node==p or current_node==q
               # mid=True
                
            #if 2 of 3 flags are T then that is the LCA
            if mid+left+right>=2:
                self.ans=current_node
                
            #ret True if either of 3 bool vals is True to backtrack that branch and mark as True
            return mid or left or right
            
                   
            
        recurse_tree(root)
        return self.ans
    
    
