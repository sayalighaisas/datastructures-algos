'''Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one that is missing from the array.

Example 1:

Input: [3,0,1]
Output: 2
Example 2:

Input: [9,6,4,2,3,5,7,0,1]
Output: 8
Note:
Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?'''

class Solution(object):
    def missingNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #Naive solution
        '''for i in range(len(nums)+1):
            if i not in nums:
                return i'''
        #Gauss' Formula:
        #Sum of n numbers is n*n+1//2
        #Max no=len(n) as list starts with 0
        expected_sum=len(nums)*(len(nums)+1)//2
        actual_sum=sum(nums)
        return expected_sum-actual_sum
