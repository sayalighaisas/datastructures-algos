'''
Given a non-empty array of integers, every element appears twice except for one. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,1]
Output: 1
Example 2:

Input: [4,1,2,1,2]
Output: 4
'''

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        '''
        for i in range(len(nums)):
            for j in range(len(nums)):
                if nums[i]==nums[j] and i!=j:
                    break
            if j==len(nums)-1:
                return nums[i]
    
    
        # [1,1,2,3,3]
        
        
        thisdict={}
        for item in nums:
            if item not in thisdict:
                thisdict[item]=1
            else:
                thisdict[item]+=1
        #thisdict = {i:nums.count(i) for i in set(nums)}
        for key,val in thisdict.iteritems():
            if val==1:
                return key
                
        '''
        result=0
        for i in range(len(nums)):
            result=result ^ nums[i]
        return result
        
