Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.

 

Example 1:

Input: A = [4,7,9,10], K = 1
Output: 5
Explanation: 
The first missing number is 5.
Example 2:

Input: A = [4,7,9,10], K = 3
Output: 8
Explanation: 
The missing numbers are [5,6,8,...], hence the third missing number is 8.
Example 3:

Input: A = [1,2,4], K = 3
Output: 6
Explanation: 
The missing numbers are [3,5,6,7,...], hence the third missing number is 6.
 

Note:

1 <= A.length <= 50000
1 <= A[i] <= 1e7
1 <= K <= 1e8



class Solution:
    def missingElement(self, nums: List[int], k: int) -> int:
        n=len(nums)
        for i in range(1,n):
            diff=nums[i]-nums[i-1]-1    #-1 to get actual count of nos missing between 2 successive nos
            if diff>=k:
                return nums[i-1]+k
            k-=diff
        return nums[n-1]+k #if missing no is after the last elem in array, add remaining k to last elem
        
        
 TC: O(N)
