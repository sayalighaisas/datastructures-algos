Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

#Recursion Tree DFS Backtracking

class Solution(object):
    def dfs(self,decision_space,fixed_path,res):
        #BC end of each branch when dec_sp is empty append that fixed_path to output,then backtrack
        if not decision_space:
            res.append(fixed_path)
            return
        for i in range(len(decision_space)):
            self.dfs(decision_space[:i]+decision_space[i+1:],fixed_path+[decision_space[i]],res)
            #Decision space has every element except i and i is added to fixed path
    
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        res=[]
        self.dfs(nums,[],res)
        return res
    
    
