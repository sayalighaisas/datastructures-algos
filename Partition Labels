A string S of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

 

Example 1:

Input: S = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
 

Note:

S will have length in range [1, 500].
S will consist of lowercase English letters ('a' to 'z') only.
 



class Solution:
    def partitionLabels(self, S: str) -> List[int]:
        sizes=[]
        while S:
            i=1
            while set(S[i:]) & set(S[:i]): #while there are elements in intersection increment when intersection is null append that val of i in size
                i+=1
            sizes.append(i)
            S=S[i:] #shorten the input string and discard 1st partition
            
        return sizes
    
    #TC: here outer while is called only partition no of times so max is 26 viz O(1) viz edge case S="ab...yz" inner while has O(N) viz overall TC
    #edge case 2:S="aaaaa" so single partition of size 5. here at end of string whole S is compared with null and intersection is null, out of inner while
        
#alternately see Greedy Approach in Solution. 
