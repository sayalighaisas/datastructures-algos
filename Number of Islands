Given a 2d grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

DFS::
SEE:https://www.youtube.com/watch?v=z5c2pJeMqOw
Intuition

Treat the 2d grid map as an undirected graph and there is an edge between two horizontally or vertically adjacent nodes of value '1'.

Algorithm

Linear scan the 2d grid map, if a node contains a '1', then it is a root node that triggers a Depth First Search. During DFS, every visited node should be set as '0' to mark as visited node. Count the number of root nodes that trigger DFS, this number would be the number of islands since each DFS starting at some root identifies an island.
 
 class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        
        count=0
        
        for i in range(len(grid)):   #for every row
            for j in range(len(grid[0])): #for every column
                if grid[i][j]=="1":
                    self.dfs(grid,i,j)
                    count+=1
                    
        return count      
        
    
    def dfs(self,grid,i,j):
            #check for all 4 bounding conditions of grid and if value is0 or # ie not 1
        if i<0 or j<0 or i>len(grid)-1 or j>len(grid[0])-1 or grid[i][j]!="1":
            return

        grid[i][j]='#' #mark as visited, ensures every val visited exactly once.
        #now call dfs on all 4 squares adjacent to current square
        self.dfs(grid,i,j+1) #next value in same row
        self.dfs(grid,i,j-1) #previous value in same row
        self.dfs(grid,i+1,j) #below val
        self.dfs(grid,i-1,j) #above val

        #when there are contiguous 1s dfs calls will be put on stack and checked successively until the very 1st call is complete and as a whole it will be 1 island
            
          Complexity Analysis

Time complexity : O(M \times N)O(M×N) where MM is the number of rows and NN is the number of columns.

Space complexity : worst case O(M \times N)O(M×N) in case that the grid map is filled with lands where DFS goes by M \times NM×N deep.
here we mark there itself as visited so no extra space used O(1)
            
            
            
