Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
Follow up:
Could you do get and put in O(1) time complexity?

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4
 

Constraints:

1 <= capacity <= 3000
0 <= key <= 3000
0 <= value <= 104
At most 3 * 104 calls will be made to get and put.


Solution: Hashmap+DLL
The problem can be solved with a hashmap that keeps track of the keys and its values in the double linked list. That results in \mathcal{O}(1)O(1) time for put and get operations and allows to remove the first added node in \mathcal{O}(1)O(1) time as well.

One advantage of double linked list is that the node can remove itself without other reference. In addition, it takes constant time to add and remove nodes from the head or tail.

One particularity about the double linked list implemented here is that there are pseudo head and pseudo tail to mark the boundary, so that we don't need to check the null node during the update.

#Newly added node and updated node will always be at 1st position of DLL after pseudohead
#Least recently used node is always at the tail just before pseudotail in DLL

class DllNode(): #has 4 fields
    def __init__(self):
        self.key= 0
        self.val=0
        self.prev=None
        self.next=None
        
class LRUCache(object):

    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cache={} #initialize the dictionary for access 0(1) its key=key and value=node
        self.size=0   #to increment while adding new node and compare to capacity
        self.capacity=capacity 
        
        #create 2 marker nodes 1 pseudo-head and 1 pseudo-tail pointing to each other which will be used to maintain the DLL order ref.
        self.head=DllNode()
        self.tail=DllNode()
        self.head.next=self.tail
        self.tail.prev=self.head
        

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        #check key in dict if present move that node to front of dll and return node.val, if not return -1
        node=self.cache.get(key,None) #this is get() function of dict
        if not node:
            return -1
        else:
            self.move_to_head(node)
            return node.val

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: None
        """
        #check if the key is already present in dict if so then only the node val is to be updated which will reflect in dll too and that node is moved to front of dll
        node=self.cache.get(key)
        if node:
            node.val=value #update value
            self.move_to_head(node)
        else:
            newNode=DllNode()
            newNode.key=key
            newNode.val=value
            
            #check capacity if full first delete tail and then add newNode in dict and dll else directly add in dict and dll
            if self.size==self.capacity:
                #pop tail node
                tail=self.pop_tail()
                tail_key=tail.key
                del self.cache[tail_key]
                self.size-=1
            
            self.cache[key]=newNode
            self.add_node(newNode)
            self.size+=1

    def move_to_head(self, node):
        self.remove_node(node) #the node is accessed directly via dict it is removed from its current posn and added to front as recently accessed
        self.add_node(node)
        
    def remove_node(self,node): #set prev and next nodes of curr node and update their ptrs to point to each other thus removing curr node
        prevNode=node.prev
        nextNode=node.next
        
        prevNode.next=nextNode
        nextNode.prev=prevNode
        
    def add_node(self,node):
        #always add new node just after pseudo-head(viz marker)
        node.prev=self.head
        node.next=self.head.next
        
        #update ptrs of head.next and nextnode.prev to point to newly added node
        self.head.next.prev=node #1st update next.prev which will update next node.prev to point to newly added node
        self.head.next=node #then update head.next
        
    def pop_tail(self): #from dll
        result=self.tail.prev
        self.remove_node(result)
        return result
    
        
# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
