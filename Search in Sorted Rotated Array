###
You are given an integer array nums sorted in ascending order, and an integer target.

Suppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

If target is found in the array return its index, otherwise, return -1.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-10^4 <= nums[i] <= 10^4
All values of nums are unique.
nums is guranteed to be rotated at some pivot.
-10^4 <= target <= 10^4
#####

Solution: Modified 1-pass Binary Search TC:O(logn)


class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        #set ptrs to start and end of arr
        start=0
        end=len(nums)-1
        while start<=end:
            mid=(start+end)//2
            if nums[mid]==target:
                return mid
            elif nums[mid]>=nums[start]:  #left sub-arr is sorted
                if target>=nums[start] and target<nums[mid]: 
                    end=mid-1   #target lies in the sorted left sub-arr so do regular BS in sorted left sub-arr
                else:
                    start=mid+1  #search in unsorted right half
            else: #right sub-arr is sorted
                if target>nums[mid] and target<=nums[end]:
                    start=mid+1 #target lies in the sorted right sub-arr so do regular BS in sorted right sub-arr
                else:
                    end=mid-1 #search in unsorted left half
        return -1
                    
