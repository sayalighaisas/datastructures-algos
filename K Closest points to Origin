We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
Example 2:

Input: points = [[3,3],[5,-1],[-2,4]], K = 2
Output: [[3,3],[-2,4]]
(The answer [[-2,4],[3,3]] would also be accepted.)
 

Note:

1 <= K <= points.length <= 10000
-10000 < points[i][0] < 10000
-10000 < points[i][1] < 10000




class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
       #since we are computing from origin(0,0) the Euclidean distance for 2D viz sqrt((x2-x1)2+(y2-y1)2) as (x1,y1)=(0,0) it is reduced to sqrt(x2 2+ y2 2). whole sqrt is further redundant when comparing all values so only compute (x2 2+ y2 2) and return k values in ascending order
        output=sorted(points,key=lambda x: x[0]**2+x[1]**2) #sort() works on list of lists as it is also iterable 
        #points.sort(key=lambda x: x[0]**2+x[1]**2) same as above
        #return points[:K]
        return output[:K]
        
        '''If shifted center instead of origin then P=(2,3) say use:
        x1=p[0]
        y1=p[1]
        custom fuction:(key=lambda x: (x[0]-x1)**2 + (x[1]-y1)**2)
        '''
